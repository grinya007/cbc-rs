diff --git a/Cbc/src/Cbc_C_Interface.cpp b/Cbc/src/Cbc_C_Interface.cpp
index cf8fdc04..6defb49f 100644
--- a/Cbc/src/Cbc_C_Interface.cpp
+++ b/Cbc/src/Cbc_C_Interface.cpp
@@ -1109,6 +1109,12 @@ Cbc_getColSolution(Cbc_Model *model)
   return model->model_->getColSolution();
 }
 
+COINLIBAPI const double *COINLINKAGE
+Cbc_getRowPrice(Cbc_Model *model)
+{
+  return model->model_->getRowPrice();
+}
+
 CbcGetProperty(int, isContinuousUnbounded)
   CbcGetProperty(int, isNodeLimitReached)
     CbcGetProperty(int, isSecondsLimitReached)
@@ -1327,6 +1333,12 @@ Cbc_setInteger(Cbc_Model *model, int iColumn)
   if (VERBOSE > 0)
     printf("%s return\n", prefix);
 }
+/** Copy in integer information */
+COINLIBAPI void COINLINKAGE
+Cbc_copyInIntegerInformation(Cbc_Model *model, const char *information)
+{
+  model->solver_->copyInIntegerInformation(information);
+}
 
 /** Adds a new column */
 COINLIBAPI void COINLINKAGE
diff --git a/Cbc/src/Cbc_C_Interface.h b/Cbc/src/Cbc_C_Interface.h
index abef8562..dc5c4322 100644
--- a/Cbc/src/Cbc_C_Interface.h
+++ b/Cbc/src/Cbc_C_Interface.h
@@ -194,6 +194,17 @@ Cbc_setContinuous(Cbc_Model *model, int iColumn);
 COINLIBAPI void COINLINKAGE
 Cbc_setInteger(Cbc_Model *model, int iColumn);
 
+/** @brief Copy in integer information
+     *
+     * At present, simply coded as zero (continuous) and non-zero (integer)
+     * May be extended at a later date.
+     *
+     * @param model problem object
+     * @param an array[getNumCols()] specifying if a variable is integer
+     **/
+COINLIBAPI void COINLINKAGE
+Cbc_copyInIntegerInformation(Cbc_Model *model, const char *information);
+
 /** @brief Cbc_Model destructor */
 COINLIBAPI void COINLINKAGE
 Cbc_deleteModel(Cbc_Model *model);
@@ -636,6 +647,14 @@ Cbc_solve(Cbc_Model *model);
 COINLIBAPI const double *COINLINKAGE
 Cbc_getColSolution(Cbc_Model *model);
 
+/** @brief Dual constraint solution
+     *
+     * @param model problem object
+     * @return vector with dual values for constraints
+     **/
+COINLIBAPI const double *COINLINKAGE
+Cbc_getRowPrice(Cbc_Model *model);
+
 
 /** @brief Best known bound on the optimal objective value 
      *
diff --git a/Cbc/src/config_default.h b/Cbc/src/config_default.h
index 918816d3..c7fad372 100644
--- a/Cbc/src/config_default.h
+++ b/Cbc/src/config_default.h
@@ -1,6 +1,6 @@
 
 /* include the COIN-OR-wide system specific configure header */
-#include "configall_system.h"
+//#include "configall_system.h"
 
 /* include the public project specific macros */
 #include "config_cbc_default.h"
@@ -29,7 +29,7 @@
 #define COIN_HAS_OSI 1
 
 /* Define to 1 if the Vol package is used */
-#define COIN_HAS_VOL 1
+#define COIN_HAS_VOL 0
 
 /* Define to 1 if the Cplex package is used */
 /* #undef COIN_HAS_CPX */
@@ -63,16 +63,16 @@
   Define to the name of the default solver interface class, e.g.,
   OsiClpSolverInterface.
 */
-/* #define OSICBC_DFLT_SOLVER OsiClpSolverInterface */
+#define OSICBC_DFLT_SOLVER OsiClpSolverInterface
 
 /* Define this symbol if clp is the default solver. */
-/* #define OSICBC_DFLT_SOLVER_CLP 1 */
+#define OSICBC_DFLT_SOLVER_CLP 1
 
 /*
   Define to the name of the .hpp file for the default solver interface class,
   e.g., "OsiClpSolverInterface.hpp" (include quotes)
 */
-/* #define OSICBC_DFLT_SOLVER_HPP "OsiClpSolverInterface.hpp" */
+#define OSICBC_DFLT_SOLVER_HPP "OsiClpSolverInterface.hpp"
 
 /* vi: softtabstop=2 shiftwidth=2 expandtab tabstop=2
 */
